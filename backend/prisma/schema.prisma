generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  image     String?
  role      UserRole @default(USER)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  problems Problem[]
  submissions Submission[]
  problemSolved ProblemSolved[]
  playlists Playlist[]
}

model Problem {
  id String @id @default(uuid())
  title String
  description String
  hints String?
  examples Json
  difficulty Difficulty
  tags String[]
  constraints String
  editorial   String?
  userId String

  referenceSolutions Json
  codeSnippets Json
  testCases Json

  discussion Json?
  ifq Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  submissions Submission[]
  solvedBy ProblemSolved[]
}

model Submission{
  id String @id @default(uuid())
  sourceCode Json
  language String
  stdout String?
  stdin String?
  stderr String?
  compileOutput String?
  status String // Accepted or Wrong answer
  memory String?
  time String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  problemId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCases TestCaseResult[]
}

model TestCaseResult {
  id            String  @id @default(uuid())
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submissionId  String

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist{
  id        String   @id @default(uuid())
  name  String
  description String?
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name , userId]) // unique playlist names per user
}
